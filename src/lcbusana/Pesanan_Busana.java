/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package lcbusana;

import database.DataPesanBusana;
import database.Koneksi;
import decorationcomponent.GradientBackgroundRowRenderer;
import decorationcomponent.tableactioncell.TableActionCellEditor;
import decorationcomponent.tableactioncell.TableActionCellRenderer;
import decorationcomponent.tableactioncell.TableActionEvent;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;
import session.Auth;
import tools.FormatData;

/**
 *
 * @author Acer
 */
public class Pesanan_Busana extends javax.swing.JPanel {
    private Layout main;
    
    /**
     * Creates new form Pesanan_Busana_New
     */
    public Pesanan_Busana(JFrame frame) {
        this.main = (Layout) frame;
        
        aturLookAndFeel();
        initComponents();
        beautifyHeader();
        manageRenderer();
        resizeColumnWidth(tblData);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        scrollTable = new javax.swing.JScrollPane();
        tblData = new javax.swing.JTable();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new java.awt.GridBagLayout());

        tblData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID Pesanan", "Jenis Busana", "Model Desain", "Warna", "Bahan", "Lingkar  Dada", "Lingkar Pinggang", "Lingkar Pinggul", "Panjang Lengan", "Panjang Baju", "Tinggi Badan", "Lebar Bahu", "Apikasi Tambahan", "Detail Khusus", "Kebutuhan Khusus", "Tanggal Pemakaian", "Kisaran Budget", "Metode Pembayaran", "Aksi"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblData.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblData.setFocusable(false);
        tblData.setRowHeight(40);
        tblData.setSelectionBackground(new java.awt.Color(232, 212, 182));
        tblData.setSelectionForeground(new java.awt.Color(51, 51, 51));
        scrollTable.setViewportView(tblData);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 20, 20);
        add(scrollTable, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void resizeColumnWidth(JTable table) {
        final TableColumnModel columnModel = table.getColumnModel();
        JTableHeader header = table.getTableHeader();

        for (int column = 0; column < table.getColumnCount(); column++) {
            int width = 100; // Lebar minimum default

            // Ambil ukuran teks dari header (judul kolom)
            TableCellRenderer headerRenderer = header.getDefaultRenderer();
            Component headerComp = headerRenderer.getTableCellRendererComponent(table, 
                    table.getColumnName(column), false, false, -1, column);
            width = Math.max(headerComp.getPreferredSize().width + 10, width);

            // Ambil ukuran teks dari setiap sel data
            for (int row = 0; row < table.getRowCount(); row++) {
                TableCellRenderer renderer = table.getCellRenderer(row, column);
                Component comp = table.prepareRenderer(renderer, row, column);
                width = Math.max(comp.getPreferredSize().width + 10, width);
            }

            // Set lebar kolom berdasarkan ukuran terbesar antara header dan isi
            columnModel.getColumn(column).setPreferredWidth(width);
        }
    }
    
    public void tampilkanDataPesan(){
        String query = "SELECT *" +
                        " FROM view_pesanan_busana" +
                        " WHERE id_pesanan IN (" +
                        " SELECT id_pesanan" +
                        " FROM pesanan_busana" +
                        " WHERE id_pelanggan = ?" +
                        " )";
        
        try(Connection conn = Koneksi.getConnection();
                PreparedStatement stmt = conn.prepareStatement(query);){
            stmt.setInt(1, Auth.getInstance().getAuthUser());
            
            try(ResultSet rs = stmt.executeQuery()){
                DefaultTableModel model = (DefaultTableModel) tblData.getModel();
                model.setRowCount(0); // Menghapus data lama
                ResultSetMetaData metaData = rs.getMetaData();
                int columnCount = metaData.getColumnCount();

                while (rs.next()) {
                    Object[] rowData = new Object[columnCount];
                    for (int i = 1; i <= columnCount; i++) {
                        rowData[i - 1] = rs.getObject(i);
                    }
                    model.addRow(rowData);
                }
            }     
        } catch(SQLException e){
            System.out.println("Gagal mengambil data: " + e.getMessage()); 
        }
    }
    
    private void beautifyHeader(){
        JTableHeader header = tblData.getTableHeader();
        header.setPreferredSize(new Dimension(tblData.getWidth(), 40));
        header.setFont(new Font("Tahoma", 1, 16));
        header.setForeground(Color.WHITE);
        
        //Mengatur gradientBackground
        GradientBackgroundRowRenderer gradientRenderer = new GradientBackgroundRowRenderer(new Color(0xab886d), new Color(0x493628), SwingConstants.CENTER);  
        header.setDefaultRenderer(gradientRenderer);
    }
    
    private void manageRenderer(){
        //Aksi (Tambah, Update, Delete)
        tblData.getColumnModel().getColumn(18).setCellRenderer(new TableActionCellRenderer());
        tblData.getColumnModel().getColumn(18).setCellEditor(new TableActionCellEditor(event()));
    }
    
    private TableActionEvent event(){
        TableActionEvent event = new TableActionEvent(){
            @Override
            public void onEdit(int row){
                editData(row);
            }
            @Override
            public void onDelete(int row){
                deleteData(row);
            }
            @Override
            public void onView(int row){
                viewData(row);;
            }
        };
        return event;
    }
    
    private void editData(int row){
        //Mengambil nilai dari baris dan menyimpannya di Array
        int columnCount = tblData.getColumnCount();
        ArrayList<String> rowData = new ArrayList<>();

        for (int col = 0; col < columnCount - 1; col++) {
            rowData.add(tblData.getValueAt(row, col).toString());
        }
        
        //Mengisi Nilai dari array tadi ke DataPesanBusana
        DataPesanBusana dataPesanan = DataPesanBusana.getInstance();
        dataPesanan.setIdPesananBusana(Integer.parseInt(rowData.get(0)));
        dataPesanan.setJenisBusana(rowData.get(1));
        dataPesanan.setModelDesain(rowData.get(2));
        dataPesanan.setWarna(rowData.get(3));
        dataPesanan.setBahan(rowData.get(4));
        dataPesanan.setLingkarDada(Double.parseDouble(rowData.get(5)));
        dataPesanan.setLingkarPinggang(Double.parseDouble(rowData.get(6)));
        dataPesanan.setLingkarPinggul(Double.parseDouble(rowData.get(7)));
        dataPesanan.setPanjangLengan(Double.parseDouble(rowData.get(8)));
        dataPesanan.setPanjangBaju(Double.parseDouble(rowData.get(9)));
        dataPesanan.setTinggiBadan(Double.parseDouble(rowData.get(10)));
        dataPesanan.setLebarBahu(Double.parseDouble(rowData.get(11)));
        dataPesanan.setAplikasiTambahan(rowData.get(12));
        dataPesanan.setDetailKhusus(rowData.get(13));
        dataPesanan.setKebutuhanKhusus(rowData.get(14));
        dataPesanan.setTanggalPemakaian(FormatData.toDate(rowData.get(15)));
        dataPesanan.setKisaranBudget(Double.parseDouble(rowData.get(16)));
        dataPesanan.setMetodePembayaran(rowData.get(17));
        dataPesanan.setIdPelanggan(Auth.getInstance().getAuthUser());
        
        main.editPesananBusana();
    }
    
    private void deleteData(int row){
        int pilihan = JOptionPane.showConfirmDialog(this,
            "Apakah Anda yakin ingin menghapus data ini?",
            "Konfirmasi Hapus",
            JOptionPane.YES_NO_OPTION);

        if (pilihan == JOptionPane.YES_OPTION) {
            try {
                // Ambil email dari kolom index ke-2
                String idPesanan = tblData.getValueAt(row, 0).toString();
                
                String query = "DELETE FROM pesanan_busana WHERE id_pesanan = ?";

                try (Connection conn = Koneksi.getConnection();
                     PreparedStatement stmt = conn.prepareStatement(query)) {

                    stmt.setString(1, idPesanan); // Set parameter email
                    int affectedRows = stmt.executeUpdate();

                    if (affectedRows > 0) {
                        // Hapus baris dari tabel jika query berhasil
                        tampilkanDataPesan();
                        JOptionPane.showMessageDialog(this, "Data berhasil dihapus.");
                    } else {
                        JOptionPane.showMessageDialog(this, "Data tidak ditemukan atau gagal dihapus.", "Terjadi Kesalahan", JOptionPane.ERROR_MESSAGE);
                    }

                }
            } catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Terjadi kesalahan: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
    
    private void viewData(int row){
        //Mengambil Nilai dari baris yang dipilih
        List<String> dataRow = new ArrayList();
        for (int i = 1; i < tblData.getColumnCount() - 1; i++) {
            dataRow.add(tblData.getValueAt(row, i).toString()); // Tambahkan data ke list
        }
        
        //Menampilkan Struk Pesanan Busana dalam JDialog
        JDialog struk = new Struk_Busana(main, true, dataRow);
        struk.setVisible(true);
    }
    
    private void aturLookAndFeel(){
        try {
            UIManager.setLookAndFeel("javax.swing.plaf.nimbus.NimbusLookAndFeel");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane scrollTable;
    private javax.swing.JTable tblData;
    // End of variables declaration//GEN-END:variables
}
